
GeradorSinaisPlacaDev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0009285c  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08096124  08096124  000b0070  2**0
                  CONTENTS
  4 .ARM          00000008  08096124  08096124  000a6124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809612c  0809612c  000b0070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0809612c  0809612c  000a612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08096130  08096130  000a6130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08096134  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  080961a4  000b0070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080961a4  000b012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000b0070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2a0  00000000  00000000  000b00a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb2  00000000  00000000  000bb340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000bcff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  000bdc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023866  00000000  00000000  000be750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf25  00000000  00000000  000e1fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85e9  00000000  00000000  000ededb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c64c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  001c6514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080038b0 	.word	0x080038b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080038b0 	.word	0x080038b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 face 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f814 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8f2 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 f8c6 	bl	8000734 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80005a8:	f000 f87e 	bl	80006a8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  TimeoutEnvioDados = 1000;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <main+0x30>)
 80005ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b2:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(TimeoutEnvioDados == 0){
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <main+0x30>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1fb      	bne.n	80005b4 <main+0x20>
//		  uint8_t pData[50] = " 0010 0020 0030\r";
//
//		  HAL_UART_Transmit_IT(&huart1, pData, 16);


		  TimeoutEnvioDados = 1;
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <main+0x30>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
	  if(TimeoutEnvioDados == 0){
 80005c2:	e7f7      	b.n	80005b4 <main+0x20>
 80005c4:	2000010c 	.word	0x2000010c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fcf4 	bl	8002fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <SystemClock_Config+0xd8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <SystemClock_Config+0xd8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xd8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xdc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <SystemClock_Config+0xdc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800063c:	23b4      	movs	r3, #180	; 0xb4
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe15 	bl	800127c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f90c 	bl	8000874 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f000 fdbe 	bl	80011dc <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000666:	f000 f905 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f865 	bl	8001758 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000694:	f000 f8ee 	bl	8000874 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_TIM7_Init+0x84>)
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_TIM7_Init+0x88>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_TIM7_Init+0x84>)
 80006be:	225a      	movs	r2, #90	; 0x5a
 80006c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_TIM7_Init+0x84>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_TIM7_Init+0x84>)
 80006ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_TIM7_Init+0x84>)
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006d6:	4815      	ldr	r0, [pc, #84]	; (800072c <MX_TIM7_Init+0x84>)
 80006d8:	f001 fa1e 	bl	8001b18 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80006e2:	f000 f8c7 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006e6:	2320      	movs	r3, #32
 80006e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_TIM7_Init+0x84>)
 80006f4:	f001 fc0c 	bl	8001f10 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80006fe:	f000 f8b9 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  __HAL_TIM_ENABLE(&htim7);
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_TIM7_Init+0x84>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_TIM7_Init+0x84>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f042 0201 	orr.w	r2, r2, #1
 8000710:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_IT(&htim7,TIM_IT_UPDATE);
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_TIM7_Init+0x84>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <MX_TIM7_Init+0x84>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f042 0201 	orr.w	r2, r2, #1
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM7_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000008c 	.word	0x2000008c
 8000730:	40001400 	.word	0x40001400

08000734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f001 fc60 	bl	8002030 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f87d 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000cc 	.word	0x200000cc
 8000784:	40011000 	.word	0x40011000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_GPIO_Init+0x30>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <MX_GPIO_Init+0x30>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_GPIO_Init+0x30>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b5b0      	push	{r4, r5, r7, lr}
 80007be:	b092      	sub	sp, #72	; 0x48
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(htim);

	static uint32_t index = 0;

	if(index <= QtdAmostrasUtilizadas){
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d843      	bhi.n	8000858 <HAL_TIM_PeriodElapsedCallback+0x9c>

//		Sinal[index][0];
	  	 char pData[50] = " 0010 0020 0030\r";
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80007d2:	f107 0408 	add.w	r4, r7, #8
 80007d6:	461d      	mov	r5, r3
 80007d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007dc:	682b      	ldr	r3, [r5, #0]
 80007de:	7023      	strb	r3, [r4, #0]
 80007e0:	f107 0319 	add.w	r3, r7, #25
 80007e4:	2221      	movs	r2, #33	; 0x21
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fbeb 	bl	8002fc4 <memset>

	  	 int nbytes = sprintf(pData," %04u %04u %04u\r",(unsigned int)Sinal[index][0],(unsigned int)Sinal[index][1],(unsigned int)Sinal[index][2]);
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	491d      	ldr	r1, [pc, #116]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	440b      	add	r3, r1
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461c      	mov	r4, r3
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4918      	ldr	r1, [pc, #96]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	440b      	add	r3, r1
 8000812:	3302      	adds	r3, #2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	461d      	mov	r5, r3
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4912      	ldr	r1, [pc, #72]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	f107 0008 	add.w	r0, r7, #8
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	462b      	mov	r3, r5
 8000834:	4622      	mov	r2, r4
 8000836:	490d      	ldr	r1, [pc, #52]	; (800086c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000838:	f002 fbcc 	bl	8002fd4 <siprintf>
 800083c:	63f8      	str	r0, [r7, #60]	; 0x3c

		HAL_UART_Transmit_IT(&huart1, (uint8_t*)pData, nbytes);
 800083e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000840:	b29a      	uxth	r2, r3
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800084a:	f001 fc3e 	bl	80020ca <HAL_UART_Transmit_IT>

		index++;
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000856:	6013      	str	r3, [r2, #0]
	}
}
 8000858:	bf00      	nop
 800085a:	3740      	adds	r7, #64	; 0x40
 800085c:	46bd      	mov	sp, r7
 800085e:	bdb0      	pop	{r4, r5, r7, pc}
 8000860:	20000110 	.word	0x20000110
 8000864:	080038dc 	.word	0x080038dc
 8000868:	08003910 	.word	0x08003910
 800086c:	080038c8 	.word	0x080038c8
 8000870:	200000cc 	.word	0x200000cc

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_TIM_Base_MspInit+0x48>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d115      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_TIM_Base_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <HAL_TIM_Base_MspInit+0x4c>)
 80008f0:	f043 0320 	orr.w	r3, r3, #32
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_TIM_Base_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2037      	movs	r0, #55	; 0x37
 8000908:	f000 fa63 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800090c:	2037      	movs	r0, #55	; 0x37
 800090e:	f000 fa7c 	bl	8000e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40001400 	.word	0x40001400
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <HAL_UART_MspInit+0x94>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d134      	bne.n	80009b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_UART_MspInit+0x98>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <HAL_UART_MspInit+0x98>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_UART_MspInit+0x98>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_UART_MspInit+0x98>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x98>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_UART_MspInit+0x98>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800097e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000990:	2307      	movs	r3, #7
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_UART_MspInit+0x9c>)
 800099c:	f000 fa72 	bl	8000e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2025      	movs	r0, #37	; 0x25
 80009a6:	f000 fa14 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f000 fa2d 	bl	8000e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40011000 	.word	0x40011000
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f8e0 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if(TimeoutEnvioDados>0){
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Handler+0x20>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d004      	beq.n	8000a2e <SysTick_Handler+0x1a>
	  TimeoutEnvioDados--;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <SysTick_Handler+0x20>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4a02      	ldr	r2, [pc, #8]	; (8000a34 <SysTick_Handler+0x20>)
 8000a2c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000010c 	.word	0x2000010c

08000a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <USART1_IRQHandler+0x10>)
 8000a3e:	f001 fb89 	bl	8002154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000cc 	.word	0x200000cc

08000a4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM7_IRQHandler+0x10>)
 8000a52:	f001 f88c 	bl	8001b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000008c 	.word	0x2000008c

08000a60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x50>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x16>
		heap_end = &end;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <_sbrk+0x50>)
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <_sbrk+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <_sbrk+0x50>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_sbrk+0x50>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	466a      	mov	r2, sp
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d907      	bls.n	8000a9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a8a:	f002 fa71 	bl	8002f70 <__errno>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	220c      	movs	r2, #12
 8000a92:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	e006      	b.n	8000aa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <_sbrk+0x50>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <_sbrk+0x50>)
 8000aa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000114 	.word	0x20000114
 8000ab4:	20000130 	.word	0x20000130

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <SystemInit+0x28>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <SystemInit+0x28>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SystemInit+0x28>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aea:	e003      	b.n	8000af4 <LoopCopyDataInit>

08000aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000af2:	3104      	adds	r1, #4

08000af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000afc:	d3f6      	bcc.n	8000aec <CopyDataInit>
  ldr  r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b00:	e002      	b.n	8000b08 <LoopFillZerobss>

08000b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b04:	f842 3b04 	str.w	r3, [r2], #4

08000b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b0c:	d3f9      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0e:	f7ff ffd3 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fa33 	bl	8002f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd3d 	bl	8000594 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b1c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b20:	08096134 	.word	0x08096134
  ldr  r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b28:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b2c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b30:	2000012c 	.word	0x2000012c

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f92b 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe8a 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f943 	bl	8000e26 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f90b 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000118 	.word	0x20000118

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000118 	.word	0x20000118

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff29 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff3e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff31 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa2 	bl	8000d78 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d004      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e00c      	b.n	8000e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2205      	movs	r2, #5
 8000e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e177      	b.n	8001190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 8166 	bne.w	800118a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d00b      	beq.n	8000ede <HAL_GPIO_Init+0x5a>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed2:	2b11      	cmp	r3, #17
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b12      	cmp	r3, #18
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0xfc>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b12      	cmp	r3, #18
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80c0 	beq.w	800118a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a65      	ldr	r2, [pc, #404]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001026:	4a61      	ldr	r2, [pc, #388]	; (80011ac <HAL_GPIO_Init+0x328>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_GPIO_Init+0x32c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d037      	beq.n	80010c2 <HAL_GPIO_Init+0x23e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x330>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d031      	beq.n	80010be <HAL_GPIO_Init+0x23a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x334>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d02b      	beq.n	80010ba <HAL_GPIO_Init+0x236>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a55      	ldr	r2, [pc, #340]	; (80011bc <HAL_GPIO_Init+0x338>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d025      	beq.n	80010b6 <HAL_GPIO_Init+0x232>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x33c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d01f      	beq.n	80010b2 <HAL_GPIO_Init+0x22e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a53      	ldr	r2, [pc, #332]	; (80011c4 <HAL_GPIO_Init+0x340>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x22a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_GPIO_Init+0x344>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x226>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x348>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x222>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x21e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x350>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x21a>
 800109a:	2309      	movs	r3, #9
 800109c:	e012      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 800109e:	230a      	movs	r3, #10
 80010a0:	e010      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00e      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x328>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_GPIO_Init+0x354>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800110c:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_GPIO_Init+0x354>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_GPIO_Init+0x354>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae84 	bls.w	8000ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40021c00 	.word	0x40021c00
 80011d0:	40022000 	.word	0x40022000
 80011d4:	40022400 	.word	0x40022400
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_PWREx_EnableOverDrive+0x90>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_PWREx_EnableOverDrive+0x90>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_PWREx_EnableOverDrive+0x90>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_PWREx_EnableOverDrive+0x94>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001208:	f7ff fcfc 	bl	8000c04 <HAL_GetTick>
 800120c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800120e:	e009      	b.n	8001224 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001210:	f7ff fcf8 	bl	8000c04 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800121e:	d901      	bls.n	8001224 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e01f      	b.n	8001264 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_PWREx_EnableOverDrive+0x98>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d1ee      	bne.n	8001210 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001238:	f7ff fce4 	bl	8000c04 <HAL_GetTick>
 800123c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800123e:	e009      	b.n	8001254 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001240:	f7ff fce0 	bl	8000c04 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124e:	d901      	bls.n	8001254 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e007      	b.n	8001264 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_PWREx_EnableOverDrive+0x98>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001260:	d1ee      	bne.n	8001240 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	420e0040 	.word	0x420e0040
 8001274:	40007000 	.word	0x40007000
 8001278:	420e0044 	.word	0x420e0044

0800127c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e25e      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d075      	beq.n	8001386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d112      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b82      	ldr	r3, [pc, #520]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012be:	d10b      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	4b7e      	ldr	r3, [pc, #504]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d05b      	beq.n	8001384 <HAL_RCC_OscConfig+0x108>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d157      	bne.n	8001384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e239      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e0:	d106      	bne.n	80012f0 <HAL_RCC_OscConfig+0x74>
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a75      	ldr	r2, [pc, #468]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e01d      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x98>
 80012fa:	4b70      	ldr	r3, [pc, #448]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6f      	ldr	r2, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6c      	ldr	r2, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 8001314:	4b69      	ldr	r3, [pc, #420]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a68      	ldr	r2, [pc, #416]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b66      	ldr	r3, [pc, #408]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a65      	ldr	r2, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fc66 	bl	8000c04 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fc62 	bl	8000c04 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1fe      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0xc0>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fc52 	bl	8000c04 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fc4e 	bl	8000c04 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1ea      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	4b51      	ldr	r3, [pc, #324]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0xe8>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d063      	beq.n	800145a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001392:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b47      	ldr	r3, [pc, #284]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d11c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b44      	ldr	r3, [pc, #272]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d116      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e1be      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4937      	ldr	r1, [pc, #220]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	e03a      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_RCC_OscConfig+0x244>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fc07 	bl	8000c04 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fc03 	bl	8000c04 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e19f      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4925      	ldr	r1, [pc, #148]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e015      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0x244>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fbe6 	bl	8000c04 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fbe2 	bl	8000c04 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e17e      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d036      	beq.n	80014d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d016      	beq.n	800149c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_RCC_OscConfig+0x248>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fbc6 	bl	8000c04 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fbc2 	bl	8000c04 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e15e      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_RCC_OscConfig+0x240>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x200>
 800149a:	e01b      	b.n	80014d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_RCC_OscConfig+0x248>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbaf 	bl	8000c04 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	e00e      	b.n	80014c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fbab 	bl	8000c04 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d907      	bls.n	80014c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e147      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ea      	bne.n	80014aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8097 	beq.w	8001610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a7c      	ldr	r2, [pc, #496]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b7a      	ldr	r3, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151e:	4b74      	ldr	r3, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb6b 	bl	8000c04 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001532:	f7ff fb67 	bl	8000c04 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e103      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x2ea>
 8001558:	4b64      	ldr	r3, [pc, #400]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a63      	ldr	r2, [pc, #396]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	e01c      	b.n	80015a0 <HAL_RCC_OscConfig+0x324>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x30c>
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a5e      	ldr	r2, [pc, #376]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a5b      	ldr	r2, [pc, #364]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0x324>
 8001588:	4b58      	ldr	r3, [pc, #352]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a57      	ldr	r2, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a54      	ldr	r2, [pc, #336]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d015      	beq.n	80015d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb2c 	bl	8000c04 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb28 	bl	8000c04 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0c2      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0ee      	beq.n	80015b0 <HAL_RCC_OscConfig+0x334>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb16 	bl	8000c04 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb12 	bl	8000c04 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0ac      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ee      	bne.n	80015dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a38      	ldr	r2, [pc, #224]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8098 	beq.w	800174a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d05c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d141      	bne.n	80016b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_RCC_OscConfig+0x478>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fae6 	bl	8000c04 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fae2 	bl	8000c04 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e07e      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	019b      	lsls	r3, r3, #6
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	3b01      	subs	r3, #1
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	491b      	ldr	r1, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x478>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fabb 	bl	8000c04 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fab7 	bl	8000c04 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e053      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x416>
 80016b0:	e04b      	b.n	800174a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x478>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff faa4 	bl	8000c04 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff faa0 	bl	8000c04 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e03c      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_RCC_OscConfig+0x470>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x444>
 80016de:	e034      	b.n	800174a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e02f      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	d11c      	bne.n	8001746 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d115      	bne.n	8001746 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001726:	4293      	cmp	r3, r2
 8001728:	d10d      	bne.n	8001746 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0cc      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d90c      	bls.n	8001794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b65      	ldr	r3, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a58      	ldr	r2, [pc, #352]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d044      	beq.n	8001878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d119      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d003      	beq.n	8001816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	2b03      	cmp	r3, #3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e067      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4934      	ldr	r1, [pc, #208]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff f9dc 	bl	8000c04 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	e00a      	b.n	8001866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff f9d8 	bl	8000c04 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 020c 	and.w	r2, r3, #12
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	429a      	cmp	r2, r3
 8001876:	d1eb      	bne.n	8001850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d20c      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f93c 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00
 8001914:	40023800 	.word	0x40023800
 8001918:	080960d8 	.word	0x080960d8
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001928:	b090      	sub	sp, #64	; 0x40
 800192a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
 8001930:	2300      	movs	r3, #0
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d00d      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x40>
 8001948:	2b08      	cmp	r3, #8
 800194a:	f200 80a1 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x16c>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x34>
 8001952:	2b04      	cmp	r3, #4
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x3a>
 8001956:	e09b      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800195c:	e09b      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_GetSysClockFreq+0x188>)
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001962:	e098      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d028      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	2200      	movs	r2, #0
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	627a      	str	r2, [r7, #36]	; 0x24
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800198c:	2100      	movs	r1, #0
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_RCC_GetSysClockFreq+0x188>)
 8001990:	fb03 f201 	mul.w	r2, r3, r1
 8001994:	2300      	movs	r3, #0
 8001996:	fb00 f303 	mul.w	r3, r0, r3
 800199a:	4413      	add	r3, r2
 800199c:	4a43      	ldr	r2, [pc, #268]	; (8001aac <HAL_RCC_GetSysClockFreq+0x188>)
 800199e:	fba0 1202 	umull	r1, r2, r0, r2
 80019a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a4:	460a      	mov	r2, r1
 80019a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80019a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019aa:	4413      	add	r3, r2
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	2200      	movs	r2, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	61fa      	str	r2, [r7, #28]
 80019b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019be:	f7fe fc67 	bl	8000290 <__aeabi_uldivmod>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4613      	mov	r3, r2
 80019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ca:	e053      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	2200      	movs	r2, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	617a      	str	r2, [r7, #20]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019de:	f04f 0b00 	mov.w	fp, #0
 80019e2:	4652      	mov	r2, sl
 80019e4:	465b      	mov	r3, fp
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	0159      	lsls	r1, r3, #5
 80019f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f4:	0150      	lsls	r0, r2, #5
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ebb2 080a 	subs.w	r8, r2, sl
 80019fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a16:	ebb2 0408 	subs.w	r4, r2, r8
 8001a1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	00eb      	lsls	r3, r5, #3
 8001a28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a2c:	00e2      	lsls	r2, r4, #3
 8001a2e:	4614      	mov	r4, r2
 8001a30:	461d      	mov	r5, r3
 8001a32:	eb14 030a 	adds.w	r3, r4, sl
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	eb45 030b 	adc.w	r3, r5, fp
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	028b      	lsls	r3, r1, #10
 8001a4e:	4621      	mov	r1, r4
 8001a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a54:	4621      	mov	r1, r4
 8001a56:	028a      	lsls	r2, r1, #10
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a68:	f7fe fc12 	bl	8000290 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3740      	adds	r7, #64	; 0x40
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	017d7840 	.word	0x017d7840

08001ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a9b      	lsrs	r3, r3, #10
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080960e8 	.word	0x080960e8

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffdc 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0b5b      	lsrs	r3, r3, #13
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080960e8 	.word	0x080960e8

08001b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e01d      	b.n	8001b66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fec8 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 f93a 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d122      	bne.n	8001bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d11b      	bne.n	8001bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0202 	mvn.w	r2, #2
 8001b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8ee 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001bb6:	e005      	b.n	8001bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8e0 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8f1 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d122      	bne.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d11b      	bne.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0204 	mvn.w	r2, #4
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8c4 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c0a:	e005      	b.n	8001c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8b6 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8c7 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d122      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11b      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0208 	mvn.w	r2, #8
 8001c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f89a 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c5e:	e005      	b.n	8001c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f88c 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f89d 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d122      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d11b      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0210 	mvn.w	r2, #16
 8001c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f870 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001cb2:	e005      	b.n	8001cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f862 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f873 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10e      	bne.n	8001cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0201 	mvn.w	r2, #1
 8001cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fd65 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d10e      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b80      	cmp	r3, #128	; 0x80
 8001d0c:	d107      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f97f 	bl	800201c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d10e      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d107      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f838 	bl	8001dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d10e      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d107      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0220 	mvn.w	r2, #32
 8001d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f949 	bl	8002008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d00f      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00b      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d027      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d023      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <TIM_Base_SetConfig+0x128>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <TIM_Base_SetConfig+0x12c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <TIM_Base_SetConfig+0x130>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_Base_SetConfig+0x134>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <TIM_Base_SetConfig+0x138>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <TIM_Base_SetConfig+0x13c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	615a      	str	r2, [r3, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40001800 	.word	0x40001800
 8001f08:	40001c00 	.word	0x40001c00
 8001f0c:	40002000 	.word	0x40002000

08001f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e05a      	b.n	8001fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d01d      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10c      	bne.n	8001fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40001800 	.word	0x40001800

08002008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e03f      	b.n	80020c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fc64 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 faad 	bl	80025d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d130      	bne.n	8002146 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_UART_Transmit_IT+0x26>
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e029      	b.n	8002148 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_UART_Transmit_IT+0x38>
 80020fe:	2302      	movs	r3, #2
 8002100:	e022      	b.n	8002148 <HAL_UART_Transmit_IT+0x7e>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2221      	movs	r2, #33	; 0x21
 8002126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002140:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_UART_IRQHandler+0x52>
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f996 	bl	80024d0 <UART_Receive_IT>
      return;
 80021a4:	e0d0      	b.n	8002348 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80b0 	beq.w	800230e <HAL_UART_IRQHandler+0x1ba>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_UART_IRQHandler+0x70>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80a5 	beq.w	800230e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_UART_IRQHandler+0x90>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_UART_IRQHandler+0xb0>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	f043 0202 	orr.w	r2, r3, #2
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_UART_IRQHandler+0xd0>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	f043 0204 	orr.w	r2, r3, #4
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00f      	beq.n	800224e <HAL_UART_IRQHandler+0xfa>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <HAL_UART_IRQHandler+0xee>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	f043 0208 	orr.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d077      	beq.n	8002346 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_UART_IRQHandler+0x11c>
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f930 	bl	80024d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	bf0c      	ite	eq
 800227e:	2301      	moveq	r3, #1
 8002280:	2300      	movne	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_UART_IRQHandler+0x144>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d031      	beq.n	80022fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f879 	bl	8002390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d123      	bne.n	80022f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_UART_IRQHandler+0x1fc>)
 80022ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fdb4 	bl	8000e3e <HAL_DMA_Abort_IT>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d016      	beq.n	800230a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022e6:	4610      	mov	r0, r2
 80022e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ea:	e00e      	b.n	800230a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f845 	bl	800237c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f2:	e00a      	b.n	800230a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f841 	bl	800237c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fa:	e006      	b.n	800230a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f83d 	bl	800237c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002308:	e01d      	b.n	8002346 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230a:	bf00      	nop
    return;
 800230c:	e01b      	b.n	8002346 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_UART_IRQHandler+0x1d6>
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f866 	bl	80023f4 <UART_Transmit_IT>
    return;
 8002328:	e00e      	b.n	8002348 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_UART_IRQHandler+0x1f4>
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8ae 	bl	80024a0 <UART_EndTransmit_IT>
    return;
 8002344:	e000      	b.n	8002348 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002346:	bf00      	nop
  }
}
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	080023cd 	.word	0x080023cd

08002354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f7ff ffc8 	bl	800237c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b21      	cmp	r3, #33	; 0x21
 8002406:	d144      	bne.n	8002492 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002410:	d11a      	bne.n	8002448 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002426:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	621a      	str	r2, [r3, #32]
 800243a:	e00e      	b.n	800245a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	621a      	str	r2, [r3, #32]
 8002446:	e008      	b.n	800245a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6211      	str	r1, [r2, #32]
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29b      	uxth	r3, r3
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4619      	mov	r1, r3
 8002468:	84d1      	strh	r1, [r2, #38]	; 0x26
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff47 	bl	8002354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b22      	cmp	r3, #34	; 0x22
 80024e2:	d171      	bne.n	80025c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	d123      	bne.n	8002536 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10e      	bne.n	800251a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	1c9a      	adds	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
 8002518:	e029      	b.n	800256e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	b29b      	uxth	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
 8002534:	e01b      	b.n	800256e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6858      	ldr	r0, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	1c59      	adds	r1, r3, #1
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6291      	str	r1, [r2, #40]	; 0x28
 800254e:	b2c2      	uxtb	r2, r0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e00c      	b.n	800256e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	1c58      	adds	r0, r3, #1
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	6288      	str	r0, [r1, #40]	; 0x28
 8002566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4619      	mov	r1, r3
 800257c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800257e:	2b00      	cmp	r3, #0
 8002580:	d120      	bne.n	80025c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0220 	bic.w	r2, r2, #32
 8002590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fed4 	bl	8002368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e002      	b.n	80025ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80025dc:	af00      	add	r7, sp, #0
 80025de:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025f2:	68d9      	ldr	r1, [r3, #12]
 80025f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	ea40 0301 	orr.w	r3, r0, r1
 80025fe:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002600:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
 800260e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	431a      	orrs	r2, r3
 8002616:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8002622:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800262e:	f021 010c 	bic.w	r1, r1, #12
 8002632:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002640:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800264c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002650:	6999      	ldr	r1, [r3, #24]
 8002652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	ea40 0301 	orr.w	r3, r0, r1
 800265c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002668:	f040 824a 	bne.w	8002b00 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b96      	ldr	r3, [pc, #600]	; (80028cc <UART_SetConfig+0x2f8>)
 8002674:	429a      	cmp	r2, r3
 8002676:	d006      	beq.n	8002686 <UART_SetConfig+0xb2>
 8002678:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b94      	ldr	r3, [pc, #592]	; (80028d0 <UART_SetConfig+0x2fc>)
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8129 	bne.w	80028d8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002686:	f7ff fa33 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 800268a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800268e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002698:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800269c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80026a0:	4622      	mov	r2, r4
 80026a2:	462b      	mov	r3, r5
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80026aa:	415b      	adcs	r3, r3
 80026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026b0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80026b4:	4621      	mov	r1, r4
 80026b6:	1851      	adds	r1, r2, r1
 80026b8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80026bc:	4629      	mov	r1, r5
 80026be:	414b      	adcs	r3, r1
 80026c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80026d0:	4649      	mov	r1, r9
 80026d2:	00cb      	lsls	r3, r1, #3
 80026d4:	4641      	mov	r1, r8
 80026d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026da:	4641      	mov	r1, r8
 80026dc:	00ca      	lsls	r2, r1, #3
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	4622      	mov	r2, r4
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80026ec:	462b      	mov	r3, r5
 80026ee:	460a      	mov	r2, r1
 80026f0:	eb42 0303 	adc.w	r3, r2, r3
 80026f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80026f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002704:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8002708:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800270c:	460b      	mov	r3, r1
 800270e:	18db      	adds	r3, r3, r3
 8002710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002714:	4613      	mov	r3, r2
 8002716:	eb42 0303 	adc.w	r3, r2, r3
 800271a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800271e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002722:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8002726:	f7fd fdb3 	bl	8000290 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <UART_SetConfig+0x300>)
 8002730:	fba3 2302 	umull	r2, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	011c      	lsls	r4, r3, #4
 8002738:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800273c:	2200      	movs	r2, #0
 800273e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002742:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002746:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800274a:	4642      	mov	r2, r8
 800274c:	464b      	mov	r3, r9
 800274e:	1891      	adds	r1, r2, r2
 8002750:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002754:	415b      	adcs	r3, r3
 8002756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800275a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800275e:	4641      	mov	r1, r8
 8002760:	1851      	adds	r1, r2, r1
 8002762:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002766:	4649      	mov	r1, r9
 8002768:	414b      	adcs	r3, r1
 800276a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800277a:	4659      	mov	r1, fp
 800277c:	00cb      	lsls	r3, r1, #3
 800277e:	4651      	mov	r1, sl
 8002780:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002784:	4651      	mov	r1, sl
 8002786:	00ca      	lsls	r2, r1, #3
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	4603      	mov	r3, r0
 800278e:	4642      	mov	r2, r8
 8002790:	189b      	adds	r3, r3, r2
 8002792:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002796:	464b      	mov	r3, r9
 8002798:	460a      	mov	r2, r1
 800279a:	eb42 0303 	adc.w	r3, r2, r3
 800279e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80027a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80027ae:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80027b2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80027b6:	460b      	mov	r3, r1
 80027b8:	18db      	adds	r3, r3, r3
 80027ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027be:	4613      	mov	r3, r2
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027c8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80027cc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80027d0:	f7fd fd5e 	bl	8000290 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4611      	mov	r1, r2
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <UART_SetConfig+0x300>)
 80027dc:	fba3 2301 	umull	r2, r3, r3, r1
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	2264      	movs	r2, #100	; 0x64
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	1acb      	subs	r3, r1, r3
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <UART_SetConfig+0x300>)
 80027f2:	fba3 2302 	umull	r2, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027fe:	441c      	add	r4, r3
 8002800:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002804:	2200      	movs	r2, #0
 8002806:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800280a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800280e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8002812:	4642      	mov	r2, r8
 8002814:	464b      	mov	r3, r9
 8002816:	1891      	adds	r1, r2, r2
 8002818:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800281c:	415b      	adcs	r3, r3
 800281e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002822:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002826:	4641      	mov	r1, r8
 8002828:	1851      	adds	r1, r2, r1
 800282a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8002842:	4659      	mov	r1, fp
 8002844:	00cb      	lsls	r3, r1, #3
 8002846:	4651      	mov	r1, sl
 8002848:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284c:	4651      	mov	r1, sl
 800284e:	00ca      	lsls	r2, r1, #3
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	4603      	mov	r3, r0
 8002856:	4642      	mov	r2, r8
 8002858:	189b      	adds	r3, r3, r2
 800285a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800285e:	464b      	mov	r3, r9
 8002860:	460a      	mov	r2, r1
 8002862:	eb42 0303 	adc.w	r3, r2, r3
 8002866:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800286a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002876:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800287a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800287e:	460b      	mov	r3, r1
 8002880:	18db      	adds	r3, r3, r3
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002886:	4613      	mov	r3, r2
 8002888:	eb42 0303 	adc.w	r3, r2, r3
 800288c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002890:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002894:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8002898:	f7fd fcfa 	bl	8000290 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <UART_SetConfig+0x300>)
 80028a2:	fba3 1302 	umull	r1, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2164      	movs	r1, #100	; 0x64
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <UART_SetConfig+0x300>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 0207 	and.w	r2, r3, #7
 80028c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4422      	add	r2, r4
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e349      	b.n	8002f60 <UART_SetConfig+0x98c>
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40011400 	.word	0x40011400
 80028d4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028d8:	f7ff f8f6 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80028dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028e4:	2200      	movs	r2, #0
 80028e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80028ea:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80028ee:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80028f2:	4622      	mov	r2, r4
 80028f4:	462b      	mov	r3, r5
 80028f6:	1891      	adds	r1, r2, r2
 80028f8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80028fc:	415b      	adcs	r3, r3
 80028fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002902:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002906:	4621      	mov	r1, r4
 8002908:	eb12 0a01 	adds.w	sl, r2, r1
 800290c:	4629      	mov	r1, r5
 800290e:	eb43 0b01 	adc.w	fp, r3, r1
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800291e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002926:	4692      	mov	sl, r2
 8002928:	469b      	mov	fp, r3
 800292a:	4623      	mov	r3, r4
 800292c:	eb1a 0303 	adds.w	r3, sl, r3
 8002930:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002934:	462b      	mov	r3, r5
 8002936:	eb4b 0303 	adc.w	r3, fp, r3
 800293a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800293e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800294a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800294e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8002952:	460b      	mov	r3, r1
 8002954:	18db      	adds	r3, r3, r3
 8002956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800295a:	4613      	mov	r3, r2
 800295c:	eb42 0303 	adc.w	r3, r2, r3
 8002960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002964:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002968:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800296c:	f7fd fc90 	bl	8000290 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <UART_SetConfig+0x528>)
 8002976:	fba3 2302 	umull	r2, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	011c      	lsls	r4, r3, #4
 800297e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002982:	2200      	movs	r2, #0
 8002984:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002988:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800298c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8002990:	4642      	mov	r2, r8
 8002992:	464b      	mov	r3, r9
 8002994:	1891      	adds	r1, r2, r2
 8002996:	67b9      	str	r1, [r7, #120]	; 0x78
 8002998:	415b      	adcs	r3, r3
 800299a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800299c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80029a0:	4641      	mov	r1, r8
 80029a2:	1851      	adds	r1, r2, r1
 80029a4:	6739      	str	r1, [r7, #112]	; 0x70
 80029a6:	4649      	mov	r1, r9
 80029a8:	414b      	adcs	r3, r1
 80029aa:	677b      	str	r3, [r7, #116]	; 0x74
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80029b8:	4659      	mov	r1, fp
 80029ba:	00cb      	lsls	r3, r1, #3
 80029bc:	4651      	mov	r1, sl
 80029be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029c2:	4651      	mov	r1, sl
 80029c4:	00ca      	lsls	r2, r1, #3
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	4642      	mov	r2, r8
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80029d4:	464b      	mov	r3, r9
 80029d6:	460a      	mov	r2, r1
 80029d8:	eb42 0303 	adc.w	r3, r2, r3
 80029dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80029e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029ec:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80029f0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80029f4:	460b      	mov	r3, r1
 80029f6:	18db      	adds	r3, r3, r3
 80029f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029fa:	4613      	mov	r3, r2
 80029fc:	eb42 0303 	adc.w	r3, r2, r3
 8002a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a02:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a0a:	f7fd fc41 	bl	8000290 <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	4b39      	ldr	r3, [pc, #228]	; (8002afc <UART_SetConfig+0x528>)
 8002a16:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2264      	movs	r2, #100	; 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	1acb      	subs	r3, r1, r3
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <UART_SetConfig+0x528>)
 8002a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a38:	441c      	add	r4, r3
 8002a3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8002a44:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002a48:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	6639      	str	r1, [r7, #96]	; 0x60
 8002a54:	415b      	adcs	r3, r3
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
 8002a58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	1851      	adds	r1, r2, r1
 8002a60:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a62:	4649      	mov	r1, r9
 8002a64:	414b      	adcs	r3, r1
 8002a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8002a74:	4659      	mov	r1, fp
 8002a76:	00cb      	lsls	r3, r1, #3
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7e:	4651      	mov	r1, sl
 8002a80:	00ca      	lsls	r2, r1, #3
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002a9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002aa8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8002aac:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	18db      	adds	r3, r3, r3
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	eb42 0303 	adc.w	r3, r2, r3
 8002abc:	657b      	str	r3, [r7, #84]	; 0x54
 8002abe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ac2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002ac6:	f7fd fbe3 	bl	8000290 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <UART_SetConfig+0x528>)
 8002ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	2164      	movs	r1, #100	; 0x64
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3332      	adds	r3, #50	; 0x32
 8002ae2:	4a06      	ldr	r2, [pc, #24]	; (8002afc <UART_SetConfig+0x528>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0207 	and.w	r2, r3, #7
 8002aee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4422      	add	r2, r4
 8002af6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002af8:	e232      	b.n	8002f60 <UART_SetConfig+0x98c>
 8002afa:	bf00      	nop
 8002afc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b8d      	ldr	r3, [pc, #564]	; (8002d3c <UART_SetConfig+0x768>)
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d006      	beq.n	8002b1a <UART_SetConfig+0x546>
 8002b0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b8b      	ldr	r3, [pc, #556]	; (8002d40 <UART_SetConfig+0x76c>)
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f040 8117 	bne.w	8002d48 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b1a:	f7fe ffe9 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8002b1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002b2c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002b30:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002b34:	4622      	mov	r2, r4
 8002b36:	462b      	mov	r3, r5
 8002b38:	1891      	adds	r1, r2, r2
 8002b3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b3c:	415b      	adcs	r3, r3
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b44:	4621      	mov	r1, r4
 8002b46:	eb12 0801 	adds.w	r8, r2, r1
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	eb43 0901 	adc.w	r9, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b64:	4690      	mov	r8, r2
 8002b66:	4699      	mov	r9, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	eb18 0303 	adds.w	r3, r8, r3
 8002b6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b72:	462b      	mov	r3, r5
 8002b74:	eb49 0303 	adc.w	r3, r9, r3
 8002b78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b88:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8002b98:	4629      	mov	r1, r5
 8002b9a:	008b      	lsls	r3, r1, #2
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	008a      	lsls	r2, r1, #2
 8002ba6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8002baa:	f7fd fb71 	bl	8000290 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <UART_SetConfig+0x770>)
 8002bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	011c      	lsls	r4, r3, #4
 8002bbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002bc6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002bca:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8002bce:	4642      	mov	r2, r8
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	1891      	adds	r1, r2, r2
 8002bd4:	6439      	str	r1, [r7, #64]	; 0x40
 8002bd6:	415b      	adcs	r3, r3
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bde:	4641      	mov	r1, r8
 8002be0:	1851      	adds	r1, r2, r1
 8002be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002be4:	4649      	mov	r1, r9
 8002be6:	414b      	adcs	r3, r1
 8002be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	00cb      	lsls	r3, r1, #3
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c00:	4651      	mov	r1, sl
 8002c02:	00ca      	lsls	r2, r1, #3
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002c12:	464b      	mov	r3, r9
 8002c14:	460a      	mov	r2, r1
 8002c16:	eb42 0303 	adc.w	r3, r2, r3
 8002c1a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002c2a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	008b      	lsls	r3, r1, #2
 8002c3e:	4641      	mov	r1, r8
 8002c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c44:	4641      	mov	r1, r8
 8002c46:	008a      	lsls	r2, r1, #2
 8002c48:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002c4c:	f7fd fb20 	bl	8000290 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <UART_SetConfig+0x770>)
 8002c56:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2164      	movs	r1, #100	; 0x64
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <UART_SetConfig+0x770>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	441c      	add	r4, r3
 8002c76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002c80:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8002c84:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	1891      	adds	r1, r2, r2
 8002c8e:	6339      	str	r1, [r7, #48]	; 0x30
 8002c90:	415b      	adcs	r3, r3
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
 8002c94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c98:	4641      	mov	r1, r8
 8002c9a:	1851      	adds	r1, r2, r1
 8002c9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	414b      	adcs	r3, r1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	00cb      	lsls	r3, r1, #3
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cba:	4651      	mov	r1, sl
 8002cbc:	00ca      	lsls	r2, r1, #3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ccc:	464b      	mov	r3, r9
 8002cce:	460a      	mov	r2, r1
 8002cd0:	eb42 0303 	adc.w	r3, r2, r3
 8002cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002cd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ce4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	008b      	lsls	r3, r1, #2
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cfe:	4641      	mov	r1, r8
 8002d00:	008a      	lsls	r2, r1, #2
 8002d02:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002d06:	f7fd fac3 	bl	8000290 <__aeabi_uldivmod>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <UART_SetConfig+0x770>)
 8002d10:	fba3 1302 	umull	r1, r3, r3, r2
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	2164      	movs	r1, #100	; 0x64
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	3332      	adds	r3, #50	; 0x32
 8002d22:	4a08      	ldr	r2, [pc, #32]	; (8002d44 <UART_SetConfig+0x770>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4422      	add	r2, r4
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	e112      	b.n	8002f60 <UART_SetConfig+0x98c>
 8002d3a:	bf00      	nop
 8002d3c:	40011000 	.word	0x40011000
 8002d40:	40011400 	.word	0x40011400
 8002d44:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7fe febe 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002d5a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d5e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8002d62:	4642      	mov	r2, r8
 8002d64:	464b      	mov	r3, r9
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	6239      	str	r1, [r7, #32]
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d72:	4641      	mov	r1, r8
 8002d74:	1854      	adds	r4, r2, r1
 8002d76:	4649      	mov	r1, r9
 8002d78:	eb43 0501 	adc.w	r5, r3, r1
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	00eb      	lsls	r3, r5, #3
 8002d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	4643      	mov	r3, r8
 8002d92:	18e3      	adds	r3, r4, r3
 8002d94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d98:	464b      	mov	r3, r9
 8002d9a:	eb45 0303 	adc.w	r3, r5, r3
 8002d9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002da2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002dae:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	008b      	lsls	r3, r1, #2
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc8:	4621      	mov	r1, r4
 8002dca:	008a      	lsls	r2, r1, #2
 8002dcc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002dd0:	f7fd fa5e 	bl	8000290 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <UART_SetConfig+0x998>)
 8002dda:	fba3 2302 	umull	r2, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	011c      	lsls	r4, r3, #4
 8002de2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002dec:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002df0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	61b9      	str	r1, [r7, #24]
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e04:	4641      	mov	r1, r8
 8002e06:	1851      	adds	r1, r2, r1
 8002e08:	6139      	str	r1, [r7, #16]
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	414b      	adcs	r3, r1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	00cb      	lsls	r3, r1, #3
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e26:	4651      	mov	r1, sl
 8002e28:	00ca      	lsls	r2, r1, #3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4642      	mov	r2, r8
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002e44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002e50:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002e60:	4649      	mov	r1, r9
 8002e62:	008b      	lsls	r3, r1, #2
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	008a      	lsls	r2, r1, #2
 8002e6e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002e72:	f7fd fa0d 	bl	8000290 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <UART_SetConfig+0x998>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <UART_SetConfig+0x998>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9a:	441c      	add	r4, r3
 8002e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ea6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002eaa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1851      	adds	r1, r2, r1
 8002ec2:	6039      	str	r1, [r7, #0]
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	414b      	adcs	r3, r1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	00cb      	lsls	r3, r1, #3
 8002eda:	4651      	mov	r1, sl
 8002edc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	00ca      	lsls	r2, r1, #3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4642      	mov	r2, r8
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	eb42 0303 	adc.w	r3, r2, r3
 8002efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002efe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	008b      	lsls	r3, r1, #2
 8002f1e:	4641      	mov	r1, r8
 8002f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f24:	4641      	mov	r1, r8
 8002f26:	008a      	lsls	r2, r1, #2
 8002f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f2c:	f7fd f9b0 	bl	8000290 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <UART_SetConfig+0x998>)
 8002f36:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2164      	movs	r1, #100	; 0x64
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	3332      	adds	r3, #50	; 0x32
 8002f48:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <UART_SetConfig+0x998>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4422      	add	r2, r4
 8002f5c:	609a      	str	r2, [r3, #8]
}
 8002f5e:	e7ff      	b.n	8002f60 <UART_SetConfig+0x98c>
 8002f60:	bf00      	nop
 8002f62:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002f66:	46bd      	mov	sp, r7
 8002f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6c:	51eb851f 	.word	0x51eb851f

08002f70 <__errno>:
 8002f70:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <__errno+0x8>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <__libc_init_array>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	4d0d      	ldr	r5, [pc, #52]	; (8002fb4 <__libc_init_array+0x38>)
 8002f80:	4c0d      	ldr	r4, [pc, #52]	; (8002fb8 <__libc_init_array+0x3c>)
 8002f82:	1b64      	subs	r4, r4, r5
 8002f84:	10a4      	asrs	r4, r4, #2
 8002f86:	2600      	movs	r6, #0
 8002f88:	42a6      	cmp	r6, r4
 8002f8a:	d109      	bne.n	8002fa0 <__libc_init_array+0x24>
 8002f8c:	4d0b      	ldr	r5, [pc, #44]	; (8002fbc <__libc_init_array+0x40>)
 8002f8e:	4c0c      	ldr	r4, [pc, #48]	; (8002fc0 <__libc_init_array+0x44>)
 8002f90:	f000 fc8e 	bl	80038b0 <_init>
 8002f94:	1b64      	subs	r4, r4, r5
 8002f96:	10a4      	asrs	r4, r4, #2
 8002f98:	2600      	movs	r6, #0
 8002f9a:	42a6      	cmp	r6, r4
 8002f9c:	d105      	bne.n	8002faa <__libc_init_array+0x2e>
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa4:	4798      	blx	r3
 8002fa6:	3601      	adds	r6, #1
 8002fa8:	e7ee      	b.n	8002f88 <__libc_init_array+0xc>
 8002faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fae:	4798      	blx	r3
 8002fb0:	3601      	adds	r6, #1
 8002fb2:	e7f2      	b.n	8002f9a <__libc_init_array+0x1e>
 8002fb4:	0809612c 	.word	0x0809612c
 8002fb8:	0809612c 	.word	0x0809612c
 8002fbc:	0809612c 	.word	0x0809612c
 8002fc0:	08096130 	.word	0x08096130

08002fc4 <memset>:
 8002fc4:	4402      	add	r2, r0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d100      	bne.n	8002fce <memset+0xa>
 8002fcc:	4770      	bx	lr
 8002fce:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd2:	e7f9      	b.n	8002fc8 <memset+0x4>

08002fd4 <siprintf>:
 8002fd4:	b40e      	push	{r1, r2, r3}
 8002fd6:	b500      	push	{lr}
 8002fd8:	b09c      	sub	sp, #112	; 0x70
 8002fda:	ab1d      	add	r3, sp, #116	; 0x74
 8002fdc:	9002      	str	r0, [sp, #8]
 8002fde:	9006      	str	r0, [sp, #24]
 8002fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <siprintf+0x38>)
 8002fe6:	9107      	str	r1, [sp, #28]
 8002fe8:	9104      	str	r1, [sp, #16]
 8002fea:	4909      	ldr	r1, [pc, #36]	; (8003010 <siprintf+0x3c>)
 8002fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ff0:	9105      	str	r1, [sp, #20]
 8002ff2:	6800      	ldr	r0, [r0, #0]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	a902      	add	r1, sp, #8
 8002ff8:	f000 f868 	bl	80030cc <_svfiprintf_r>
 8002ffc:	9b02      	ldr	r3, [sp, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	b01c      	add	sp, #112	; 0x70
 8003004:	f85d eb04 	ldr.w	lr, [sp], #4
 8003008:	b003      	add	sp, #12
 800300a:	4770      	bx	lr
 800300c:	2000000c 	.word	0x2000000c
 8003010:	ffff0208 	.word	0xffff0208

08003014 <__ssputs_r>:
 8003014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003018:	688e      	ldr	r6, [r1, #8]
 800301a:	429e      	cmp	r6, r3
 800301c:	4682      	mov	sl, r0
 800301e:	460c      	mov	r4, r1
 8003020:	4690      	mov	r8, r2
 8003022:	461f      	mov	r7, r3
 8003024:	d838      	bhi.n	8003098 <__ssputs_r+0x84>
 8003026:	898a      	ldrh	r2, [r1, #12]
 8003028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800302c:	d032      	beq.n	8003094 <__ssputs_r+0x80>
 800302e:	6825      	ldr	r5, [r4, #0]
 8003030:	6909      	ldr	r1, [r1, #16]
 8003032:	eba5 0901 	sub.w	r9, r5, r1
 8003036:	6965      	ldr	r5, [r4, #20]
 8003038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800303c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003040:	3301      	adds	r3, #1
 8003042:	444b      	add	r3, r9
 8003044:	106d      	asrs	r5, r5, #1
 8003046:	429d      	cmp	r5, r3
 8003048:	bf38      	it	cc
 800304a:	461d      	movcc	r5, r3
 800304c:	0553      	lsls	r3, r2, #21
 800304e:	d531      	bpl.n	80030b4 <__ssputs_r+0xa0>
 8003050:	4629      	mov	r1, r5
 8003052:	f000 fb63 	bl	800371c <_malloc_r>
 8003056:	4606      	mov	r6, r0
 8003058:	b950      	cbnz	r0, 8003070 <__ssputs_r+0x5c>
 800305a:	230c      	movs	r3, #12
 800305c:	f8ca 3000 	str.w	r3, [sl]
 8003060:	89a3      	ldrh	r3, [r4, #12]
 8003062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003066:	81a3      	strh	r3, [r4, #12]
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003070:	6921      	ldr	r1, [r4, #16]
 8003072:	464a      	mov	r2, r9
 8003074:	f000 fabe 	bl	80035f4 <memcpy>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	6126      	str	r6, [r4, #16]
 8003086:	6165      	str	r5, [r4, #20]
 8003088:	444e      	add	r6, r9
 800308a:	eba5 0509 	sub.w	r5, r5, r9
 800308e:	6026      	str	r6, [r4, #0]
 8003090:	60a5      	str	r5, [r4, #8]
 8003092:	463e      	mov	r6, r7
 8003094:	42be      	cmp	r6, r7
 8003096:	d900      	bls.n	800309a <__ssputs_r+0x86>
 8003098:	463e      	mov	r6, r7
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	4632      	mov	r2, r6
 800309e:	4641      	mov	r1, r8
 80030a0:	f000 fab6 	bl	8003610 <memmove>
 80030a4:	68a3      	ldr	r3, [r4, #8]
 80030a6:	1b9b      	subs	r3, r3, r6
 80030a8:	60a3      	str	r3, [r4, #8]
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	4433      	add	r3, r6
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	2000      	movs	r0, #0
 80030b2:	e7db      	b.n	800306c <__ssputs_r+0x58>
 80030b4:	462a      	mov	r2, r5
 80030b6:	f000 fba5 	bl	8003804 <_realloc_r>
 80030ba:	4606      	mov	r6, r0
 80030bc:	2800      	cmp	r0, #0
 80030be:	d1e1      	bne.n	8003084 <__ssputs_r+0x70>
 80030c0:	6921      	ldr	r1, [r4, #16]
 80030c2:	4650      	mov	r0, sl
 80030c4:	f000 fabe 	bl	8003644 <_free_r>
 80030c8:	e7c7      	b.n	800305a <__ssputs_r+0x46>
	...

080030cc <_svfiprintf_r>:
 80030cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	4698      	mov	r8, r3
 80030d2:	898b      	ldrh	r3, [r1, #12]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	b09d      	sub	sp, #116	; 0x74
 80030d8:	4607      	mov	r7, r0
 80030da:	460d      	mov	r5, r1
 80030dc:	4614      	mov	r4, r2
 80030de:	d50e      	bpl.n	80030fe <_svfiprintf_r+0x32>
 80030e0:	690b      	ldr	r3, [r1, #16]
 80030e2:	b963      	cbnz	r3, 80030fe <_svfiprintf_r+0x32>
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	f000 fb19 	bl	800371c <_malloc_r>
 80030ea:	6028      	str	r0, [r5, #0]
 80030ec:	6128      	str	r0, [r5, #16]
 80030ee:	b920      	cbnz	r0, 80030fa <_svfiprintf_r+0x2e>
 80030f0:	230c      	movs	r3, #12
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	e0d1      	b.n	800329e <_svfiprintf_r+0x1d2>
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	616b      	str	r3, [r5, #20]
 80030fe:	2300      	movs	r3, #0
 8003100:	9309      	str	r3, [sp, #36]	; 0x24
 8003102:	2320      	movs	r3, #32
 8003104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003108:	f8cd 800c 	str.w	r8, [sp, #12]
 800310c:	2330      	movs	r3, #48	; 0x30
 800310e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80032b8 <_svfiprintf_r+0x1ec>
 8003112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003116:	f04f 0901 	mov.w	r9, #1
 800311a:	4623      	mov	r3, r4
 800311c:	469a      	mov	sl, r3
 800311e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003122:	b10a      	cbz	r2, 8003128 <_svfiprintf_r+0x5c>
 8003124:	2a25      	cmp	r2, #37	; 0x25
 8003126:	d1f9      	bne.n	800311c <_svfiprintf_r+0x50>
 8003128:	ebba 0b04 	subs.w	fp, sl, r4
 800312c:	d00b      	beq.n	8003146 <_svfiprintf_r+0x7a>
 800312e:	465b      	mov	r3, fp
 8003130:	4622      	mov	r2, r4
 8003132:	4629      	mov	r1, r5
 8003134:	4638      	mov	r0, r7
 8003136:	f7ff ff6d 	bl	8003014 <__ssputs_r>
 800313a:	3001      	adds	r0, #1
 800313c:	f000 80aa 	beq.w	8003294 <_svfiprintf_r+0x1c8>
 8003140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003142:	445a      	add	r2, fp
 8003144:	9209      	str	r2, [sp, #36]	; 0x24
 8003146:	f89a 3000 	ldrb.w	r3, [sl]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a2 	beq.w	8003294 <_svfiprintf_r+0x1c8>
 8003150:	2300      	movs	r3, #0
 8003152:	f04f 32ff 	mov.w	r2, #4294967295
 8003156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800315a:	f10a 0a01 	add.w	sl, sl, #1
 800315e:	9304      	str	r3, [sp, #16]
 8003160:	9307      	str	r3, [sp, #28]
 8003162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003166:	931a      	str	r3, [sp, #104]	; 0x68
 8003168:	4654      	mov	r4, sl
 800316a:	2205      	movs	r2, #5
 800316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003170:	4851      	ldr	r0, [pc, #324]	; (80032b8 <_svfiprintf_r+0x1ec>)
 8003172:	f7fd f83d 	bl	80001f0 <memchr>
 8003176:	9a04      	ldr	r2, [sp, #16]
 8003178:	b9d8      	cbnz	r0, 80031b2 <_svfiprintf_r+0xe6>
 800317a:	06d0      	lsls	r0, r2, #27
 800317c:	bf44      	itt	mi
 800317e:	2320      	movmi	r3, #32
 8003180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003184:	0711      	lsls	r1, r2, #28
 8003186:	bf44      	itt	mi
 8003188:	232b      	movmi	r3, #43	; 0x2b
 800318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800318e:	f89a 3000 	ldrb.w	r3, [sl]
 8003192:	2b2a      	cmp	r3, #42	; 0x2a
 8003194:	d015      	beq.n	80031c2 <_svfiprintf_r+0xf6>
 8003196:	9a07      	ldr	r2, [sp, #28]
 8003198:	4654      	mov	r4, sl
 800319a:	2000      	movs	r0, #0
 800319c:	f04f 0c0a 	mov.w	ip, #10
 80031a0:	4621      	mov	r1, r4
 80031a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031a6:	3b30      	subs	r3, #48	; 0x30
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d94e      	bls.n	800324a <_svfiprintf_r+0x17e>
 80031ac:	b1b0      	cbz	r0, 80031dc <_svfiprintf_r+0x110>
 80031ae:	9207      	str	r2, [sp, #28]
 80031b0:	e014      	b.n	80031dc <_svfiprintf_r+0x110>
 80031b2:	eba0 0308 	sub.w	r3, r0, r8
 80031b6:	fa09 f303 	lsl.w	r3, r9, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	9304      	str	r3, [sp, #16]
 80031be:	46a2      	mov	sl, r4
 80031c0:	e7d2      	b.n	8003168 <_svfiprintf_r+0x9c>
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	1d19      	adds	r1, r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	9103      	str	r1, [sp, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bfbb      	ittet	lt
 80031ce:	425b      	neglt	r3, r3
 80031d0:	f042 0202 	orrlt.w	r2, r2, #2
 80031d4:	9307      	strge	r3, [sp, #28]
 80031d6:	9307      	strlt	r3, [sp, #28]
 80031d8:	bfb8      	it	lt
 80031da:	9204      	strlt	r2, [sp, #16]
 80031dc:	7823      	ldrb	r3, [r4, #0]
 80031de:	2b2e      	cmp	r3, #46	; 0x2e
 80031e0:	d10c      	bne.n	80031fc <_svfiprintf_r+0x130>
 80031e2:	7863      	ldrb	r3, [r4, #1]
 80031e4:	2b2a      	cmp	r3, #42	; 0x2a
 80031e6:	d135      	bne.n	8003254 <_svfiprintf_r+0x188>
 80031e8:	9b03      	ldr	r3, [sp, #12]
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	9203      	str	r2, [sp, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bfb8      	it	lt
 80031f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80031f8:	3402      	adds	r4, #2
 80031fa:	9305      	str	r3, [sp, #20]
 80031fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032c8 <_svfiprintf_r+0x1fc>
 8003200:	7821      	ldrb	r1, [r4, #0]
 8003202:	2203      	movs	r2, #3
 8003204:	4650      	mov	r0, sl
 8003206:	f7fc fff3 	bl	80001f0 <memchr>
 800320a:	b140      	cbz	r0, 800321e <_svfiprintf_r+0x152>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	eba0 000a 	sub.w	r0, r0, sl
 8003212:	fa03 f000 	lsl.w	r0, r3, r0
 8003216:	9b04      	ldr	r3, [sp, #16]
 8003218:	4303      	orrs	r3, r0
 800321a:	3401      	adds	r4, #1
 800321c:	9304      	str	r3, [sp, #16]
 800321e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003222:	4826      	ldr	r0, [pc, #152]	; (80032bc <_svfiprintf_r+0x1f0>)
 8003224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003228:	2206      	movs	r2, #6
 800322a:	f7fc ffe1 	bl	80001f0 <memchr>
 800322e:	2800      	cmp	r0, #0
 8003230:	d038      	beq.n	80032a4 <_svfiprintf_r+0x1d8>
 8003232:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <_svfiprintf_r+0x1f4>)
 8003234:	bb1b      	cbnz	r3, 800327e <_svfiprintf_r+0x1b2>
 8003236:	9b03      	ldr	r3, [sp, #12]
 8003238:	3307      	adds	r3, #7
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	3308      	adds	r3, #8
 8003240:	9303      	str	r3, [sp, #12]
 8003242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003244:	4433      	add	r3, r6
 8003246:	9309      	str	r3, [sp, #36]	; 0x24
 8003248:	e767      	b.n	800311a <_svfiprintf_r+0x4e>
 800324a:	fb0c 3202 	mla	r2, ip, r2, r3
 800324e:	460c      	mov	r4, r1
 8003250:	2001      	movs	r0, #1
 8003252:	e7a5      	b.n	80031a0 <_svfiprintf_r+0xd4>
 8003254:	2300      	movs	r3, #0
 8003256:	3401      	adds	r4, #1
 8003258:	9305      	str	r3, [sp, #20]
 800325a:	4619      	mov	r1, r3
 800325c:	f04f 0c0a 	mov.w	ip, #10
 8003260:	4620      	mov	r0, r4
 8003262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003266:	3a30      	subs	r2, #48	; 0x30
 8003268:	2a09      	cmp	r2, #9
 800326a:	d903      	bls.n	8003274 <_svfiprintf_r+0x1a8>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0c5      	beq.n	80031fc <_svfiprintf_r+0x130>
 8003270:	9105      	str	r1, [sp, #20]
 8003272:	e7c3      	b.n	80031fc <_svfiprintf_r+0x130>
 8003274:	fb0c 2101 	mla	r1, ip, r1, r2
 8003278:	4604      	mov	r4, r0
 800327a:	2301      	movs	r3, #1
 800327c:	e7f0      	b.n	8003260 <_svfiprintf_r+0x194>
 800327e:	ab03      	add	r3, sp, #12
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	462a      	mov	r2, r5
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <_svfiprintf_r+0x1f8>)
 8003286:	a904      	add	r1, sp, #16
 8003288:	4638      	mov	r0, r7
 800328a:	f3af 8000 	nop.w
 800328e:	1c42      	adds	r2, r0, #1
 8003290:	4606      	mov	r6, r0
 8003292:	d1d6      	bne.n	8003242 <_svfiprintf_r+0x176>
 8003294:	89ab      	ldrh	r3, [r5, #12]
 8003296:	065b      	lsls	r3, r3, #25
 8003298:	f53f af2c 	bmi.w	80030f4 <_svfiprintf_r+0x28>
 800329c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800329e:	b01d      	add	sp, #116	; 0x74
 80032a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a4:	ab03      	add	r3, sp, #12
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	462a      	mov	r2, r5
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <_svfiprintf_r+0x1f8>)
 80032ac:	a904      	add	r1, sp, #16
 80032ae:	4638      	mov	r0, r7
 80032b0:	f000 f87a 	bl	80033a8 <_printf_i>
 80032b4:	e7eb      	b.n	800328e <_svfiprintf_r+0x1c2>
 80032b6:	bf00      	nop
 80032b8:	080960f0 	.word	0x080960f0
 80032bc:	080960fa 	.word	0x080960fa
 80032c0:	00000000 	.word	0x00000000
 80032c4:	08003015 	.word	0x08003015
 80032c8:	080960f6 	.word	0x080960f6

080032cc <_printf_common>:
 80032cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d0:	4616      	mov	r6, r2
 80032d2:	4699      	mov	r9, r3
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	690b      	ldr	r3, [r1, #16]
 80032d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032dc:	4293      	cmp	r3, r2
 80032de:	bfb8      	it	lt
 80032e0:	4613      	movlt	r3, r2
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e8:	4607      	mov	r7, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	b10a      	cbz	r2, 80032f2 <_printf_common+0x26>
 80032ee:	3301      	adds	r3, #1
 80032f0:	6033      	str	r3, [r6, #0]
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	0699      	lsls	r1, r3, #26
 80032f6:	bf42      	ittt	mi
 80032f8:	6833      	ldrmi	r3, [r6, #0]
 80032fa:	3302      	addmi	r3, #2
 80032fc:	6033      	strmi	r3, [r6, #0]
 80032fe:	6825      	ldr	r5, [r4, #0]
 8003300:	f015 0506 	ands.w	r5, r5, #6
 8003304:	d106      	bne.n	8003314 <_printf_common+0x48>
 8003306:	f104 0a19 	add.w	sl, r4, #25
 800330a:	68e3      	ldr	r3, [r4, #12]
 800330c:	6832      	ldr	r2, [r6, #0]
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	42ab      	cmp	r3, r5
 8003312:	dc26      	bgt.n	8003362 <_printf_common+0x96>
 8003314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003318:	1e13      	subs	r3, r2, #0
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	bf18      	it	ne
 800331e:	2301      	movne	r3, #1
 8003320:	0692      	lsls	r2, r2, #26
 8003322:	d42b      	bmi.n	800337c <_printf_common+0xb0>
 8003324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003328:	4649      	mov	r1, r9
 800332a:	4638      	mov	r0, r7
 800332c:	47c0      	blx	r8
 800332e:	3001      	adds	r0, #1
 8003330:	d01e      	beq.n	8003370 <_printf_common+0xa4>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	68e5      	ldr	r5, [r4, #12]
 8003336:	6832      	ldr	r2, [r6, #0]
 8003338:	f003 0306 	and.w	r3, r3, #6
 800333c:	2b04      	cmp	r3, #4
 800333e:	bf08      	it	eq
 8003340:	1aad      	subeq	r5, r5, r2
 8003342:	68a3      	ldr	r3, [r4, #8]
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	bf0c      	ite	eq
 8003348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800334c:	2500      	movne	r5, #0
 800334e:	4293      	cmp	r3, r2
 8003350:	bfc4      	itt	gt
 8003352:	1a9b      	subgt	r3, r3, r2
 8003354:	18ed      	addgt	r5, r5, r3
 8003356:	2600      	movs	r6, #0
 8003358:	341a      	adds	r4, #26
 800335a:	42b5      	cmp	r5, r6
 800335c:	d11a      	bne.n	8003394 <_printf_common+0xc8>
 800335e:	2000      	movs	r0, #0
 8003360:	e008      	b.n	8003374 <_printf_common+0xa8>
 8003362:	2301      	movs	r3, #1
 8003364:	4652      	mov	r2, sl
 8003366:	4649      	mov	r1, r9
 8003368:	4638      	mov	r0, r7
 800336a:	47c0      	blx	r8
 800336c:	3001      	adds	r0, #1
 800336e:	d103      	bne.n	8003378 <_printf_common+0xac>
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003378:	3501      	adds	r5, #1
 800337a:	e7c6      	b.n	800330a <_printf_common+0x3e>
 800337c:	18e1      	adds	r1, r4, r3
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	2030      	movs	r0, #48	; 0x30
 8003382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003386:	4422      	add	r2, r4
 8003388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800338c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003390:	3302      	adds	r3, #2
 8003392:	e7c7      	b.n	8003324 <_printf_common+0x58>
 8003394:	2301      	movs	r3, #1
 8003396:	4622      	mov	r2, r4
 8003398:	4649      	mov	r1, r9
 800339a:	4638      	mov	r0, r7
 800339c:	47c0      	blx	r8
 800339e:	3001      	adds	r0, #1
 80033a0:	d0e6      	beq.n	8003370 <_printf_common+0xa4>
 80033a2:	3601      	adds	r6, #1
 80033a4:	e7d9      	b.n	800335a <_printf_common+0x8e>
	...

080033a8 <_printf_i>:
 80033a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033ac:	7e0f      	ldrb	r7, [r1, #24]
 80033ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033b0:	2f78      	cmp	r7, #120	; 0x78
 80033b2:	4691      	mov	r9, r2
 80033b4:	4680      	mov	r8, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	469a      	mov	sl, r3
 80033ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033be:	d807      	bhi.n	80033d0 <_printf_i+0x28>
 80033c0:	2f62      	cmp	r7, #98	; 0x62
 80033c2:	d80a      	bhi.n	80033da <_printf_i+0x32>
 80033c4:	2f00      	cmp	r7, #0
 80033c6:	f000 80d8 	beq.w	800357a <_printf_i+0x1d2>
 80033ca:	2f58      	cmp	r7, #88	; 0x58
 80033cc:	f000 80a3 	beq.w	8003516 <_printf_i+0x16e>
 80033d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d8:	e03a      	b.n	8003450 <_printf_i+0xa8>
 80033da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033de:	2b15      	cmp	r3, #21
 80033e0:	d8f6      	bhi.n	80033d0 <_printf_i+0x28>
 80033e2:	a101      	add	r1, pc, #4	; (adr r1, 80033e8 <_printf_i+0x40>)
 80033e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033e8:	08003441 	.word	0x08003441
 80033ec:	08003455 	.word	0x08003455
 80033f0:	080033d1 	.word	0x080033d1
 80033f4:	080033d1 	.word	0x080033d1
 80033f8:	080033d1 	.word	0x080033d1
 80033fc:	080033d1 	.word	0x080033d1
 8003400:	08003455 	.word	0x08003455
 8003404:	080033d1 	.word	0x080033d1
 8003408:	080033d1 	.word	0x080033d1
 800340c:	080033d1 	.word	0x080033d1
 8003410:	080033d1 	.word	0x080033d1
 8003414:	08003561 	.word	0x08003561
 8003418:	08003485 	.word	0x08003485
 800341c:	08003543 	.word	0x08003543
 8003420:	080033d1 	.word	0x080033d1
 8003424:	080033d1 	.word	0x080033d1
 8003428:	08003583 	.word	0x08003583
 800342c:	080033d1 	.word	0x080033d1
 8003430:	08003485 	.word	0x08003485
 8003434:	080033d1 	.word	0x080033d1
 8003438:	080033d1 	.word	0x080033d1
 800343c:	0800354b 	.word	0x0800354b
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	602a      	str	r2, [r5, #0]
 8003448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800344c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003450:	2301      	movs	r3, #1
 8003452:	e0a3      	b.n	800359c <_printf_i+0x1f4>
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	6829      	ldr	r1, [r5, #0]
 8003458:	0606      	lsls	r6, r0, #24
 800345a:	f101 0304 	add.w	r3, r1, #4
 800345e:	d50a      	bpl.n	8003476 <_printf_i+0xce>
 8003460:	680e      	ldr	r6, [r1, #0]
 8003462:	602b      	str	r3, [r5, #0]
 8003464:	2e00      	cmp	r6, #0
 8003466:	da03      	bge.n	8003470 <_printf_i+0xc8>
 8003468:	232d      	movs	r3, #45	; 0x2d
 800346a:	4276      	negs	r6, r6
 800346c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003470:	485e      	ldr	r0, [pc, #376]	; (80035ec <_printf_i+0x244>)
 8003472:	230a      	movs	r3, #10
 8003474:	e019      	b.n	80034aa <_printf_i+0x102>
 8003476:	680e      	ldr	r6, [r1, #0]
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800347e:	bf18      	it	ne
 8003480:	b236      	sxthne	r6, r6
 8003482:	e7ef      	b.n	8003464 <_printf_i+0xbc>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	1d19      	adds	r1, r3, #4
 800348a:	6029      	str	r1, [r5, #0]
 800348c:	0601      	lsls	r1, r0, #24
 800348e:	d501      	bpl.n	8003494 <_printf_i+0xec>
 8003490:	681e      	ldr	r6, [r3, #0]
 8003492:	e002      	b.n	800349a <_printf_i+0xf2>
 8003494:	0646      	lsls	r6, r0, #25
 8003496:	d5fb      	bpl.n	8003490 <_printf_i+0xe8>
 8003498:	881e      	ldrh	r6, [r3, #0]
 800349a:	4854      	ldr	r0, [pc, #336]	; (80035ec <_printf_i+0x244>)
 800349c:	2f6f      	cmp	r7, #111	; 0x6f
 800349e:	bf0c      	ite	eq
 80034a0:	2308      	moveq	r3, #8
 80034a2:	230a      	movne	r3, #10
 80034a4:	2100      	movs	r1, #0
 80034a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034aa:	6865      	ldr	r5, [r4, #4]
 80034ac:	60a5      	str	r5, [r4, #8]
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	bfa2      	ittt	ge
 80034b2:	6821      	ldrge	r1, [r4, #0]
 80034b4:	f021 0104 	bicge.w	r1, r1, #4
 80034b8:	6021      	strge	r1, [r4, #0]
 80034ba:	b90e      	cbnz	r6, 80034c0 <_printf_i+0x118>
 80034bc:	2d00      	cmp	r5, #0
 80034be:	d04d      	beq.n	800355c <_printf_i+0x1b4>
 80034c0:	4615      	mov	r5, r2
 80034c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80034c6:	fb03 6711 	mls	r7, r3, r1, r6
 80034ca:	5dc7      	ldrb	r7, [r0, r7]
 80034cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034d0:	4637      	mov	r7, r6
 80034d2:	42bb      	cmp	r3, r7
 80034d4:	460e      	mov	r6, r1
 80034d6:	d9f4      	bls.n	80034c2 <_printf_i+0x11a>
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d10b      	bne.n	80034f4 <_printf_i+0x14c>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	07de      	lsls	r6, r3, #31
 80034e0:	d508      	bpl.n	80034f4 <_printf_i+0x14c>
 80034e2:	6923      	ldr	r3, [r4, #16]
 80034e4:	6861      	ldr	r1, [r4, #4]
 80034e6:	4299      	cmp	r1, r3
 80034e8:	bfde      	ittt	le
 80034ea:	2330      	movle	r3, #48	; 0x30
 80034ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034f4:	1b52      	subs	r2, r2, r5
 80034f6:	6122      	str	r2, [r4, #16]
 80034f8:	f8cd a000 	str.w	sl, [sp]
 80034fc:	464b      	mov	r3, r9
 80034fe:	aa03      	add	r2, sp, #12
 8003500:	4621      	mov	r1, r4
 8003502:	4640      	mov	r0, r8
 8003504:	f7ff fee2 	bl	80032cc <_printf_common>
 8003508:	3001      	adds	r0, #1
 800350a:	d14c      	bne.n	80035a6 <_printf_i+0x1fe>
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	b004      	add	sp, #16
 8003512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003516:	4835      	ldr	r0, [pc, #212]	; (80035ec <_printf_i+0x244>)
 8003518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800351c:	6829      	ldr	r1, [r5, #0]
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	f851 6b04 	ldr.w	r6, [r1], #4
 8003524:	6029      	str	r1, [r5, #0]
 8003526:	061d      	lsls	r5, r3, #24
 8003528:	d514      	bpl.n	8003554 <_printf_i+0x1ac>
 800352a:	07df      	lsls	r7, r3, #31
 800352c:	bf44      	itt	mi
 800352e:	f043 0320 	orrmi.w	r3, r3, #32
 8003532:	6023      	strmi	r3, [r4, #0]
 8003534:	b91e      	cbnz	r6, 800353e <_printf_i+0x196>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	f023 0320 	bic.w	r3, r3, #32
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	2310      	movs	r3, #16
 8003540:	e7b0      	b.n	80034a4 <_printf_i+0xfc>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	f043 0320 	orr.w	r3, r3, #32
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	2378      	movs	r3, #120	; 0x78
 800354c:	4828      	ldr	r0, [pc, #160]	; (80035f0 <_printf_i+0x248>)
 800354e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003552:	e7e3      	b.n	800351c <_printf_i+0x174>
 8003554:	0659      	lsls	r1, r3, #25
 8003556:	bf48      	it	mi
 8003558:	b2b6      	uxthmi	r6, r6
 800355a:	e7e6      	b.n	800352a <_printf_i+0x182>
 800355c:	4615      	mov	r5, r2
 800355e:	e7bb      	b.n	80034d8 <_printf_i+0x130>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	6826      	ldr	r6, [r4, #0]
 8003564:	6961      	ldr	r1, [r4, #20]
 8003566:	1d18      	adds	r0, r3, #4
 8003568:	6028      	str	r0, [r5, #0]
 800356a:	0635      	lsls	r5, r6, #24
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	d501      	bpl.n	8003574 <_printf_i+0x1cc>
 8003570:	6019      	str	r1, [r3, #0]
 8003572:	e002      	b.n	800357a <_printf_i+0x1d2>
 8003574:	0670      	lsls	r0, r6, #25
 8003576:	d5fb      	bpl.n	8003570 <_printf_i+0x1c8>
 8003578:	8019      	strh	r1, [r3, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	6123      	str	r3, [r4, #16]
 800357e:	4615      	mov	r5, r2
 8003580:	e7ba      	b.n	80034f8 <_printf_i+0x150>
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	1d1a      	adds	r2, r3, #4
 8003586:	602a      	str	r2, [r5, #0]
 8003588:	681d      	ldr	r5, [r3, #0]
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	2100      	movs	r1, #0
 800358e:	4628      	mov	r0, r5
 8003590:	f7fc fe2e 	bl	80001f0 <memchr>
 8003594:	b108      	cbz	r0, 800359a <_printf_i+0x1f2>
 8003596:	1b40      	subs	r0, r0, r5
 8003598:	6060      	str	r0, [r4, #4]
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	6123      	str	r3, [r4, #16]
 800359e:	2300      	movs	r3, #0
 80035a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a4:	e7a8      	b.n	80034f8 <_printf_i+0x150>
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	462a      	mov	r2, r5
 80035aa:	4649      	mov	r1, r9
 80035ac:	4640      	mov	r0, r8
 80035ae:	47d0      	blx	sl
 80035b0:	3001      	adds	r0, #1
 80035b2:	d0ab      	beq.n	800350c <_printf_i+0x164>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	079b      	lsls	r3, r3, #30
 80035b8:	d413      	bmi.n	80035e2 <_printf_i+0x23a>
 80035ba:	68e0      	ldr	r0, [r4, #12]
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	4298      	cmp	r0, r3
 80035c0:	bfb8      	it	lt
 80035c2:	4618      	movlt	r0, r3
 80035c4:	e7a4      	b.n	8003510 <_printf_i+0x168>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4632      	mov	r2, r6
 80035ca:	4649      	mov	r1, r9
 80035cc:	4640      	mov	r0, r8
 80035ce:	47d0      	blx	sl
 80035d0:	3001      	adds	r0, #1
 80035d2:	d09b      	beq.n	800350c <_printf_i+0x164>
 80035d4:	3501      	adds	r5, #1
 80035d6:	68e3      	ldr	r3, [r4, #12]
 80035d8:	9903      	ldr	r1, [sp, #12]
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	42ab      	cmp	r3, r5
 80035de:	dcf2      	bgt.n	80035c6 <_printf_i+0x21e>
 80035e0:	e7eb      	b.n	80035ba <_printf_i+0x212>
 80035e2:	2500      	movs	r5, #0
 80035e4:	f104 0619 	add.w	r6, r4, #25
 80035e8:	e7f5      	b.n	80035d6 <_printf_i+0x22e>
 80035ea:	bf00      	nop
 80035ec:	08096101 	.word	0x08096101
 80035f0:	08096112 	.word	0x08096112

080035f4 <memcpy>:
 80035f4:	440a      	add	r2, r1
 80035f6:	4291      	cmp	r1, r2
 80035f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035fc:	d100      	bne.n	8003600 <memcpy+0xc>
 80035fe:	4770      	bx	lr
 8003600:	b510      	push	{r4, lr}
 8003602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800360a:	4291      	cmp	r1, r2
 800360c:	d1f9      	bne.n	8003602 <memcpy+0xe>
 800360e:	bd10      	pop	{r4, pc}

08003610 <memmove>:
 8003610:	4288      	cmp	r0, r1
 8003612:	b510      	push	{r4, lr}
 8003614:	eb01 0402 	add.w	r4, r1, r2
 8003618:	d902      	bls.n	8003620 <memmove+0x10>
 800361a:	4284      	cmp	r4, r0
 800361c:	4623      	mov	r3, r4
 800361e:	d807      	bhi.n	8003630 <memmove+0x20>
 8003620:	1e43      	subs	r3, r0, #1
 8003622:	42a1      	cmp	r1, r4
 8003624:	d008      	beq.n	8003638 <memmove+0x28>
 8003626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800362a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800362e:	e7f8      	b.n	8003622 <memmove+0x12>
 8003630:	4402      	add	r2, r0
 8003632:	4601      	mov	r1, r0
 8003634:	428a      	cmp	r2, r1
 8003636:	d100      	bne.n	800363a <memmove+0x2a>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800363e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003642:	e7f7      	b.n	8003634 <memmove+0x24>

08003644 <_free_r>:
 8003644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003646:	2900      	cmp	r1, #0
 8003648:	d044      	beq.n	80036d4 <_free_r+0x90>
 800364a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364e:	9001      	str	r0, [sp, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f1a1 0404 	sub.w	r4, r1, #4
 8003656:	bfb8      	it	lt
 8003658:	18e4      	addlt	r4, r4, r3
 800365a:	f000 f913 	bl	8003884 <__malloc_lock>
 800365e:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <_free_r+0x94>)
 8003660:	9801      	ldr	r0, [sp, #4]
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	b933      	cbnz	r3, 8003674 <_free_r+0x30>
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6014      	str	r4, [r2, #0]
 800366a:	b003      	add	sp, #12
 800366c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003670:	f000 b90e 	b.w	8003890 <__malloc_unlock>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d908      	bls.n	800368a <_free_r+0x46>
 8003678:	6825      	ldr	r5, [r4, #0]
 800367a:	1961      	adds	r1, r4, r5
 800367c:	428b      	cmp	r3, r1
 800367e:	bf01      	itttt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	1949      	addeq	r1, r1, r5
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	e7ed      	b.n	8003666 <_free_r+0x22>
 800368a:	461a      	mov	r2, r3
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b10b      	cbz	r3, 8003694 <_free_r+0x50>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d9fa      	bls.n	800368a <_free_r+0x46>
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	1855      	adds	r5, r2, r1
 8003698:	42a5      	cmp	r5, r4
 800369a:	d10b      	bne.n	80036b4 <_free_r+0x70>
 800369c:	6824      	ldr	r4, [r4, #0]
 800369e:	4421      	add	r1, r4
 80036a0:	1854      	adds	r4, r2, r1
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	d1e0      	bne.n	800366a <_free_r+0x26>
 80036a8:	681c      	ldr	r4, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6053      	str	r3, [r2, #4]
 80036ae:	4421      	add	r1, r4
 80036b0:	6011      	str	r1, [r2, #0]
 80036b2:	e7da      	b.n	800366a <_free_r+0x26>
 80036b4:	d902      	bls.n	80036bc <_free_r+0x78>
 80036b6:	230c      	movs	r3, #12
 80036b8:	6003      	str	r3, [r0, #0]
 80036ba:	e7d6      	b.n	800366a <_free_r+0x26>
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	1961      	adds	r1, r4, r5
 80036c0:	428b      	cmp	r3, r1
 80036c2:	bf04      	itt	eq
 80036c4:	6819      	ldreq	r1, [r3, #0]
 80036c6:	685b      	ldreq	r3, [r3, #4]
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	bf04      	itt	eq
 80036cc:	1949      	addeq	r1, r1, r5
 80036ce:	6021      	streq	r1, [r4, #0]
 80036d0:	6054      	str	r4, [r2, #4]
 80036d2:	e7ca      	b.n	800366a <_free_r+0x26>
 80036d4:	b003      	add	sp, #12
 80036d6:	bd30      	pop	{r4, r5, pc}
 80036d8:	2000011c 	.word	0x2000011c

080036dc <sbrk_aligned>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4e0e      	ldr	r6, [pc, #56]	; (8003718 <sbrk_aligned+0x3c>)
 80036e0:	460c      	mov	r4, r1
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	4605      	mov	r5, r0
 80036e6:	b911      	cbnz	r1, 80036ee <sbrk_aligned+0x12>
 80036e8:	f000 f8bc 	bl	8003864 <_sbrk_r>
 80036ec:	6030      	str	r0, [r6, #0]
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 f8b7 	bl	8003864 <_sbrk_r>
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	d00a      	beq.n	8003710 <sbrk_aligned+0x34>
 80036fa:	1cc4      	adds	r4, r0, #3
 80036fc:	f024 0403 	bic.w	r4, r4, #3
 8003700:	42a0      	cmp	r0, r4
 8003702:	d007      	beq.n	8003714 <sbrk_aligned+0x38>
 8003704:	1a21      	subs	r1, r4, r0
 8003706:	4628      	mov	r0, r5
 8003708:	f000 f8ac 	bl	8003864 <_sbrk_r>
 800370c:	3001      	adds	r0, #1
 800370e:	d101      	bne.n	8003714 <sbrk_aligned+0x38>
 8003710:	f04f 34ff 	mov.w	r4, #4294967295
 8003714:	4620      	mov	r0, r4
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	20000120 	.word	0x20000120

0800371c <_malloc_r>:
 800371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003720:	1ccd      	adds	r5, r1, #3
 8003722:	f025 0503 	bic.w	r5, r5, #3
 8003726:	3508      	adds	r5, #8
 8003728:	2d0c      	cmp	r5, #12
 800372a:	bf38      	it	cc
 800372c:	250c      	movcc	r5, #12
 800372e:	2d00      	cmp	r5, #0
 8003730:	4607      	mov	r7, r0
 8003732:	db01      	blt.n	8003738 <_malloc_r+0x1c>
 8003734:	42a9      	cmp	r1, r5
 8003736:	d905      	bls.n	8003744 <_malloc_r+0x28>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	2600      	movs	r6, #0
 800373e:	4630      	mov	r0, r6
 8003740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003744:	4e2e      	ldr	r6, [pc, #184]	; (8003800 <_malloc_r+0xe4>)
 8003746:	f000 f89d 	bl	8003884 <__malloc_lock>
 800374a:	6833      	ldr	r3, [r6, #0]
 800374c:	461c      	mov	r4, r3
 800374e:	bb34      	cbnz	r4, 800379e <_malloc_r+0x82>
 8003750:	4629      	mov	r1, r5
 8003752:	4638      	mov	r0, r7
 8003754:	f7ff ffc2 	bl	80036dc <sbrk_aligned>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	4604      	mov	r4, r0
 800375c:	d14d      	bne.n	80037fa <_malloc_r+0xde>
 800375e:	6834      	ldr	r4, [r6, #0]
 8003760:	4626      	mov	r6, r4
 8003762:	2e00      	cmp	r6, #0
 8003764:	d140      	bne.n	80037e8 <_malloc_r+0xcc>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	4631      	mov	r1, r6
 800376a:	4638      	mov	r0, r7
 800376c:	eb04 0803 	add.w	r8, r4, r3
 8003770:	f000 f878 	bl	8003864 <_sbrk_r>
 8003774:	4580      	cmp	r8, r0
 8003776:	d13a      	bne.n	80037ee <_malloc_r+0xd2>
 8003778:	6821      	ldr	r1, [r4, #0]
 800377a:	3503      	adds	r5, #3
 800377c:	1a6d      	subs	r5, r5, r1
 800377e:	f025 0503 	bic.w	r5, r5, #3
 8003782:	3508      	adds	r5, #8
 8003784:	2d0c      	cmp	r5, #12
 8003786:	bf38      	it	cc
 8003788:	250c      	movcc	r5, #12
 800378a:	4629      	mov	r1, r5
 800378c:	4638      	mov	r0, r7
 800378e:	f7ff ffa5 	bl	80036dc <sbrk_aligned>
 8003792:	3001      	adds	r0, #1
 8003794:	d02b      	beq.n	80037ee <_malloc_r+0xd2>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	442b      	add	r3, r5
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	e00e      	b.n	80037bc <_malloc_r+0xa0>
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	1b52      	subs	r2, r2, r5
 80037a2:	d41e      	bmi.n	80037e2 <_malloc_r+0xc6>
 80037a4:	2a0b      	cmp	r2, #11
 80037a6:	d916      	bls.n	80037d6 <_malloc_r+0xba>
 80037a8:	1961      	adds	r1, r4, r5
 80037aa:	42a3      	cmp	r3, r4
 80037ac:	6025      	str	r5, [r4, #0]
 80037ae:	bf18      	it	ne
 80037b0:	6059      	strne	r1, [r3, #4]
 80037b2:	6863      	ldr	r3, [r4, #4]
 80037b4:	bf08      	it	eq
 80037b6:	6031      	streq	r1, [r6, #0]
 80037b8:	5162      	str	r2, [r4, r5]
 80037ba:	604b      	str	r3, [r1, #4]
 80037bc:	4638      	mov	r0, r7
 80037be:	f104 060b 	add.w	r6, r4, #11
 80037c2:	f000 f865 	bl	8003890 <__malloc_unlock>
 80037c6:	f026 0607 	bic.w	r6, r6, #7
 80037ca:	1d23      	adds	r3, r4, #4
 80037cc:	1af2      	subs	r2, r6, r3
 80037ce:	d0b6      	beq.n	800373e <_malloc_r+0x22>
 80037d0:	1b9b      	subs	r3, r3, r6
 80037d2:	50a3      	str	r3, [r4, r2]
 80037d4:	e7b3      	b.n	800373e <_malloc_r+0x22>
 80037d6:	6862      	ldr	r2, [r4, #4]
 80037d8:	42a3      	cmp	r3, r4
 80037da:	bf0c      	ite	eq
 80037dc:	6032      	streq	r2, [r6, #0]
 80037de:	605a      	strne	r2, [r3, #4]
 80037e0:	e7ec      	b.n	80037bc <_malloc_r+0xa0>
 80037e2:	4623      	mov	r3, r4
 80037e4:	6864      	ldr	r4, [r4, #4]
 80037e6:	e7b2      	b.n	800374e <_malloc_r+0x32>
 80037e8:	4634      	mov	r4, r6
 80037ea:	6876      	ldr	r6, [r6, #4]
 80037ec:	e7b9      	b.n	8003762 <_malloc_r+0x46>
 80037ee:	230c      	movs	r3, #12
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4638      	mov	r0, r7
 80037f4:	f000 f84c 	bl	8003890 <__malloc_unlock>
 80037f8:	e7a1      	b.n	800373e <_malloc_r+0x22>
 80037fa:	6025      	str	r5, [r4, #0]
 80037fc:	e7de      	b.n	80037bc <_malloc_r+0xa0>
 80037fe:	bf00      	nop
 8003800:	2000011c 	.word	0x2000011c

08003804 <_realloc_r>:
 8003804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003808:	4680      	mov	r8, r0
 800380a:	4614      	mov	r4, r2
 800380c:	460e      	mov	r6, r1
 800380e:	b921      	cbnz	r1, 800381a <_realloc_r+0x16>
 8003810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003814:	4611      	mov	r1, r2
 8003816:	f7ff bf81 	b.w	800371c <_malloc_r>
 800381a:	b92a      	cbnz	r2, 8003828 <_realloc_r+0x24>
 800381c:	f7ff ff12 	bl	8003644 <_free_r>
 8003820:	4625      	mov	r5, r4
 8003822:	4628      	mov	r0, r5
 8003824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003828:	f000 f838 	bl	800389c <_malloc_usable_size_r>
 800382c:	4284      	cmp	r4, r0
 800382e:	4607      	mov	r7, r0
 8003830:	d802      	bhi.n	8003838 <_realloc_r+0x34>
 8003832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003836:	d812      	bhi.n	800385e <_realloc_r+0x5a>
 8003838:	4621      	mov	r1, r4
 800383a:	4640      	mov	r0, r8
 800383c:	f7ff ff6e 	bl	800371c <_malloc_r>
 8003840:	4605      	mov	r5, r0
 8003842:	2800      	cmp	r0, #0
 8003844:	d0ed      	beq.n	8003822 <_realloc_r+0x1e>
 8003846:	42bc      	cmp	r4, r7
 8003848:	4622      	mov	r2, r4
 800384a:	4631      	mov	r1, r6
 800384c:	bf28      	it	cs
 800384e:	463a      	movcs	r2, r7
 8003850:	f7ff fed0 	bl	80035f4 <memcpy>
 8003854:	4631      	mov	r1, r6
 8003856:	4640      	mov	r0, r8
 8003858:	f7ff fef4 	bl	8003644 <_free_r>
 800385c:	e7e1      	b.n	8003822 <_realloc_r+0x1e>
 800385e:	4635      	mov	r5, r6
 8003860:	e7df      	b.n	8003822 <_realloc_r+0x1e>
	...

08003864 <_sbrk_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4d06      	ldr	r5, [pc, #24]	; (8003880 <_sbrk_r+0x1c>)
 8003868:	2300      	movs	r3, #0
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	602b      	str	r3, [r5, #0]
 8003870:	f7fd f8f6 	bl	8000a60 <_sbrk>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_sbrk_r+0x1a>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_sbrk_r+0x1a>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20000124 	.word	0x20000124

08003884 <__malloc_lock>:
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <__malloc_lock+0x8>)
 8003886:	f000 b811 	b.w	80038ac <__retarget_lock_acquire_recursive>
 800388a:	bf00      	nop
 800388c:	20000128 	.word	0x20000128

08003890 <__malloc_unlock>:
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <__malloc_unlock+0x8>)
 8003892:	f000 b80c 	b.w	80038ae <__retarget_lock_release_recursive>
 8003896:	bf00      	nop
 8003898:	20000128 	.word	0x20000128

0800389c <_malloc_usable_size_r>:
 800389c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a0:	1f18      	subs	r0, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfbc      	itt	lt
 80038a6:	580b      	ldrlt	r3, [r1, r0]
 80038a8:	18c0      	addlt	r0, r0, r3
 80038aa:	4770      	bx	lr

080038ac <__retarget_lock_acquire_recursive>:
 80038ac:	4770      	bx	lr

080038ae <__retarget_lock_release_recursive>:
 80038ae:	4770      	bx	lr

080038b0 <_init>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr

080038bc <_fini>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr
